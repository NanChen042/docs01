import{_ as s,c as a,o as i,U as n}from"./chunks/framework._5hEHeV0.js";const t="/assets/image.fmRhI6Na.png",e="/assets/1.8OwHNoVV.png",l="/assets/2.lNEGR1Ro.png",p="/assets/3.hiHH6zB9.png",h="/assets/4.mUl9w4lN.png",r="/assets/5.5DPMEAnb.png",o="/assets/6.AOhbunX-.png",k="/assets/7.SyQBEyTt.png",c="/assets/8.f5ViG8_h.png",d="/assets/9.hSxTnfX1.png",E="/assets/10.XrUXzUTR.png",g="/assets/11.3qCa9APT.png",_="/assets/12.oFHnOyqs.png",m="/assets/13.3CelcwCa.png",y="/assets/14.0f5cd46X.png",F="/assets/15.RFR-VOQ7.gif",u="/assets/16.54Ufv87C.png",C="/assets/17.Oqe-OUUN.png",S="/assets/18.Y2XIDWAg.png",P=JSON.parse('{"title":"HarmonyOS4.0系列——01、下载、安装、配置环境、搭建页面以及运行示例代码.md","description":"","frontmatter":{},"headers":[],"relativePath":"column/Travel/harmony-os-4.0-series/HarmonyOS4.0系列——01、下载、安装、配置环境、搭建页面以及运行示例代码.md","filePath":"column/Travel/harmony-os-4.0-series/HarmonyOS4.0系列——01、下载、安装、配置环境、搭建页面以及运行示例代码.md"}'),A={name:"column/Travel/harmony-os-4.0-series/HarmonyOS4.0系列——01、下载、安装、配置环境、搭建页面以及运行示例代码.md"},f=n('<h1 id="harmonyos4-0系列——01、下载、安装、配置环境、搭建页面以及运行示例代码-md" tabindex="-1">HarmonyOS4.0系列——01、下载、安装、配置环境、搭建页面以及运行示例代码.md <a class="header-anchor" href="#harmonyos4-0系列——01、下载、安装、配置环境、搭建页面以及运行示例代码-md" aria-label="Permalink to &quot;HarmonyOS4.0系列——01、下载、安装、配置环境、搭建页面以及运行示例代码.md&quot;">​</a></h1><h2 id="harmonyos4-0应用开发" tabindex="-1">HarmonyOS4.0应用开发 <a class="header-anchor" href="#harmonyos4-0应用开发" aria-label="Permalink to &quot;HarmonyOS4.0应用开发&quot;">​</a></h2><h3 id="安装编辑器" tabindex="-1">安装编辑器 <a class="header-anchor" href="#安装编辑器" aria-label="Permalink to &quot;安装编辑器&quot;">​</a></h3><p><img src="'+t+'" alt="Alt text"><img src="'+e+'" alt="在这里插入图片描述"> 这里安装windows版本为例</p><h3 id="安装依赖" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖" aria-label="Permalink to &quot;安装依赖&quot;">​</a></h3><p>打开<code>DevEco Studio</code><img src="'+l+'" alt="在这里插入图片描述"> 这八项全部打钩即可开始编写代码，如果存在x，需要安装正确的库即可</p><h3 id="开发" tabindex="-1">开发 <a class="header-anchor" href="#开发" aria-label="Permalink to &quot;开发&quot;">​</a></h3><p>点击<code>Create Project</code><img src="'+p+'" alt="在这里插入图片描述"> 选择默认模板——next <img src="'+h+'" alt="在这里插入图片描述"><img src="'+r+'" alt="在这里插入图片描述"> Model部分分为<code>Stage</code>和<code>FA</code>两个应用模型，<code>FA</code>是支持7版本以内的模型支持JS和TS，而<code>Stage</code>支持最新版切只支持TS <img src="'+o+'" alt="在这里插入图片描述"></p><p><img src="'+k+'" alt="在这里插入图片描述"> 建议大家使用<code>Stage</code>模型 <img src="'+c+'" alt="在这里插入图片描述"><img src="'+d+'" alt="在这里插入图片描述"> 编辑好之后点击<code>Finish</code> 进去后等加载完毕在右上角点击预览查看效果 <img src="'+E+`" alt="在这里插入图片描述"></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@Entry</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 程序入口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@Component</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 组件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 结构体，语法格式 struct {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">struct Index {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @State </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello World&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 界面内容放在build中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Row</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 行有多高</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 列有多长</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fontSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fontWeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FontWeight.Bold)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;100%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;100%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此段代码就是让界面撑满整个屏幕并对<code>Hello World</code>设置字体大小以及粗体</p><p>DevEco Studio提供自动更新代码和实时渲染的效果</p><p><img src="`+g+'" alt="在这里插入图片描述"> 电源键：打开状态下会进行实时更新，如果是关闭状态就不会进行更新，建议打开</p><p><img src="'+_+'" alt="在这里插入图片描述"><img src="'+m+'" alt="在这里插入图片描述"> 鸿蒙系统可以在一端代码兼容多端应用，那么如何看到pad端、桌面端等其他的调试效果呢？ <img src="'+y+'" alt="在这里插入图片描述"><img src="'+F+'" alt="请添加图片描述"></p><p>如果开启了多端查询那么热更新是无法进行实时更新的，需要关闭一下</p><p><img src="'+u+'" alt="在这里插入图片描述"></p><h3 id="真机调试" tabindex="-1">真机调试 <a class="header-anchor" href="#真机调试" aria-label="Permalink to &quot;真机调试&quot;">​</a></h3><p><img src="'+C+'" alt="在这里插入图片描述"><img src="'+S+'" alt="在这里插入图片描述"> 这里要有绑定的华为设备就可以了，这里就不演示了</p>',18),b=[f];function B(D,O,T,q,x,H){return i(),a("div",null,b)}const N=s(A,[["render",B]]);export{P as __pageData,N as default};
